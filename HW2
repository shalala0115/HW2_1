1: flatten array, given an array




2. https://leetcode.com/problems/3sum/description/
var threeSum = function(nums) {
    nums.sort(sortNumber)
    var l = nums.length
    var i;
    var j;
    var k;
    var s;
    var res = [];
    for (i = 0; i < l-2 ; i++) {
        if (i>0 && nums[i] === nums[i-1]){
            continue;
        }
        j = i+1;
        k = l-1;  
        while(j<k){
            s = nums[i] + nums[j] +nums[k];
            if(s==0){
                res.push([nums[i], nums[j], nums[k]]);
                j += 1;
                k -= 1;
                while (j<k && nums[j] == nums[j-1]){
                    j += 1;
                }
                while (j<k && nums[k] == nums[k+1]){
                    k -= 1;
                }
            }
            else{
                if(s<0){
                    j += 1                    
                }
                else{
                    k -= 1
                }
            }    
        }        
    }  
    return res
};

function sortNumber(a,b)
{
    return a - b
}

3: https://leetcode.com/problems/permutations/description/
var permute = function(nums) {
    var res = [];
    var rlist = [];
    find(rlist, nums, res);
    return res;
};

function find(rlist, nums, res) {
  if (!nums.length) {
      res.push(rlist.concat());
      return;
  }

  for (var i = 0; i < nums.length; i++) {
      var x = nums[i];
      rlist.push(x);
      nums.splice(i, 1);
      find(rlist, nums, res);
      rlist.pop();
      nums.splice(i, 0, x);
  }
};



4: https://leetcode.com/problems/merge-intervals/description/
var merge = function(intervals) {
    intervals.sort(function(a,b){return a[0]-b[0];});
    console.log(intervals);
    var l = intervals.length;
    if(l == 0){
        return [];
    }
    var res=[intervals[0]];
    console.log(l);
    for(var i=1; i<l; i++){
        var le = res.length;
        if(res[le-1][1] >= intervals[i][0]){
            if (res[le-1][1] < intervals[i][1]){
                res[le-1][1] = intervals[i][1];
            }
        }   
        else{
            res.push(intervals[i])
        }
    }
    return res;
};

5: https://leetcode.com/problems/contiguous-array/
var findMaxLength = function(nums) {
    var l = nums.length;
    var map = {};
    map[0] = -1; 
    var sum = 0;
    var res = 0;
    for(var i=0; i<l; i++){
        if (nums[i] == 0){
            sum -= 1;
        }
        else{
            sum += 1;
        }
        if (sum in map){
            res = Math.max(res, i-map[sum]);
        }
        else{
            map[sum] = i;
        }
    }
    return res
};


6: https://leetcode.com/problems/zigzag-conversion/description/
string

var convert = function(s, numRows) {
    var l = s.length;
    if(numRows == 1){
        return s;
    }
    var c = 2*numRows - 2;
    var res = "";
    for(var i = 0; i<numRows; i++){
        var j = 0;
        while(i+j<l){
            res = res + s[i+j];
            if(i!= 0 && i!= numRows-1 && j+c-i<l ){
                res = res+s[j+c-i];
            }
            j = j + c;
        }
    }
    return res;
};

7: https://leetcode.com/problems/132-pattern/description/
Key: Stack

var find132pattern = function(nums) {
    
    var l = nums.length
    if (l<= 2){
        return false
    }
    var ak = Number.MIN_SAFE_INTEGER
    var stack = [] 
    for (var i = l; i>=0; i--){
        if (nums[i]<ak){
            return true
        }
        while(stack.length!=0 && nums[i] > stack[stack.length-1] ){
            ak = stack.pop()
        }
        stack.push(nums[i])
    }
    return false
};

